---

- name: backup-configure | Ensure backup user exists
  user: name={{ backup_user }}

- name: backup-configure | Ensure node-exporter group exists
  group:
    name: "{{ backup_node_exporter_group }}"
    system: yes
  when: backup_prometheus

- name: backup-configure | Ensure backup users are in node-exporter group
  user:
    name: "{{ item.user|default(backup_user) }}"
    groups: "{{ backup_node_exporter_group }}"
    append: yes
  when: backup_prometheus
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Ensure backup directories exist
  file: path={{ item }} state=directory owner={{ backup_user }} group={{ backup_group }}
  with_items:
  - "{{ backup_home }}"
  - "{{ item.work_dir|default(backup_work) }}"
  - "{{ backup_logdir }}"

- name: backup-configure | Create profile directories
  file:
    path: "{{ backup_home }}/{{ item.name }}"
    state: directory
    mode: 0700
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Configure profiles
  template:
    src: conf.j2
    dest: "{{ backup_home }}/{{ item.name }}/conf"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Configure exclude lists
  template:
    src: exclude.j2
    dest: "{{ backup_home }}/{{ item.name }}/exclude"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Configure pre scripts
  template:
    src: pre.j2
    dest: "{{ backup_home }}/{{ item.name }}/pre"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Configure post scripts
  template:
    src: post.j2
    dest: "{{ backup_home }}/{{ item.name }}/post"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Configure restore examples
  template:
    src: restore.j2
    dest: "{{ backup_home }}/{{ item.name }}/restore"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"
  when: item.source.startswith('postgresql://') or item.source.startswith('mysql://') or item.source.startswith('mongo://') or item.source.startswith('redis://')

- name: backup-configure | Ensure node-exporter dir exists
  file:
    path: "{{ backup_prometheus_dir }}"
    state: directory
  when: backup_prometheus

- name: backup-configure | Create node-exporter metric files with 0 value
  template:
    src: backup.prom.j2
    dest: "{{ backup_prometheus_dir }}/backup_{{ item.name }}.prom"
    force: no
    group: "{{ backup_node_exporter_group }}"
  with_items: "{{ backup_profiles }}"
  when: backup_prometheus

- name: backup-configure | Create work directories
  file:
    state: directory
    path: "{{ item.work_dir|default(backup_work) }}/{{ item.name }}"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"

- name: backup-configure | Ensure legacy cron file is absent
  file:
    state: absent
    path: /etc/cron.d/backup

- name: backup-configure | Setup cron
  cron:
    cron_file: duply_backup
    user: "{{ item.user|default(backup_user) }}"
    job: /usr/bin/duply {{ backup_home }}/{{ item.name }} {{ item.action|default('backup')}} >> {{ backup_logdir }}/{{ item.name }}.log 2>&1
    minute: "{{ item.schedule.split(' ')[0] }}"
    hour: "{{ item.schedule.split(' ')[1] }}"
    day: "{{ item.schedule.split(' ')[2] }}"
    month: "{{ item.schedule.split(' ')[3] }}"
    weekday: "{{ item.schedule.split(' ')[4] }}"
    name: "{{ item.name }}"
  loop: "{{ backup_profiles }}"
  when: backup_cron and item.schedule|default(None)

- name: backup-configure | Create log files
  file:
    state: touch
    path: "{{ backup_logdir }}/{{ item.name }}.log"
    owner: "{{ item.user|default(backup_user) }}"
    group: "{{ item.group|default(backup_group) }}"
  with_items: "{{ backup_profiles }}"
  changed_when: False

- name: backup-configure | Configure logrotate
  template:
    src: logrotate.j2
    dest: /etc/logrotate.d/backup
    owner: root
    group: root
    mode: 0644
